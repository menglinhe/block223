external interface Serializable {}

class Block223 {
	depend java.io.Serializable;
	isA Serializable;
	private static final long serialVersionUID = 1L;
	public void reinitialize() {
		User.reinitializeUniqueUserName(this.getUsers());
		Game.reinitializeUniqueGameName(this.getGames());
		for(Game game: games){
			Block.reinitializeAutouniqueID(game.getBlocks());
		}
	}
}

class User {
	depend java.io.Serializable;
	isA Serializable;
	private static final long serialVersionUID = 2L;
	public static void reinitializeUniqueUserName(List<User> users) {
	  usersByUsername = new HashMap<String, User>();
	  for (User user : users) {
	      usersByUsername.put(user.getUsername(), user);
	      }
	}
}

class UserRole {
	depend java.io.Serializable;
	isA Serializable;
	private static final long serialVersionUID = 3L;
}

class Admin {
	depend java.io.Serializable;
	isA Serializable;
	private static final long serialVersionUID = 4L;
}

class Player {
	depend java.io.Serializable;
	isA Serializable;
	private static final long serialVersionUID = 5L;
}

class Game {
	depend java.io.Serializable;
	isA Serializable;
	private static final long serialVersionUID = 6L;
	public static void reinitializeUniqueGameName(List<Game> games) {
	  gamesByName = new HashMap<String, Game>();
	  for (Game game : games) {
	      gamesByName.put(game.getName(), game);
	      }
	}
}

class Block {
	depend java.io.Serializable;
	isA Serializable;
	private static final long serialVersionUID = 7L;
	public static void reinitializeAutouniqueID(List<Block> blocks) {
	    nextId = 0; 
	    for (Block block: blocks) {
	      if (block.getId() > nextId) {
	        nextId = block.getId();
	      }
	    }
	    nextId++;
	}
}

class Level {
	depend java.io.Serializable;
	isA Serializable;
	private static final long serialVersionUID = 8L;
}

class BlockAssignment {
	depend java.io.Serializable;
	isA Serializable;
	private static final long serialVersionUID = 9L;
}

class Ball {
	depend java.io.Serializable;
	isA Serializable;
	private static final long serialVersionUID = 10L;
}

class Paddle {
	depend java.io.Serializable;
	isA Serializable;
	private static final long serialVersionUID = 11L;
}
